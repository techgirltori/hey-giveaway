{"version":3,"sources":["webpack:///static/loadingScreen.vue","webpack:///static/spinningwheel.vue","webpack:///static/winneranimation.vue"],"names":[],"mappings":";AAsBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;;;ACkIA;EACA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;;;ACnIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA;AACA;IACA;AACA;AACA;IACA;AACA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA;AACA;IACA;AACA;AACA;IACA;IACA;AACA;AACA","file":"css/view.css","sourcesContent":["<!--\nCopyright 2020 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<template>\n  <div class=\"overlay\">\n    ‚è≥\n  </div>\n</template>\n\n<style scoped>\n  .overlay {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #FFF;\n    z-index: 100;\n    text-align: center;\n    font-size: 100px;\n    cursor: pointer;\n  }\n</style>\n","<!--\nCopyright 2020 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<template>\n  <div class=\"container\" style=\"text-align: center\">\n    <canvas id=\"wheelCanvas\" style=\"width:100%\" @click=\"spin()\" width=\"700\" height=\"700\">\n    </canvas>\n    <div v-if=\"!isTouchScreen\" id=\"instructionsLayer\" ref=\"instructionsLayer\" @click=\"spin()\">\n      <div class=\"instructionsText\" id=\"topInstruction\" style=\"padding-top: 20%\">\n        {{ $t('spinningwheel.Click to spin') }}\n      </div>\n      <div class=\"instructionsText\" id=\"bottomInstruction\" style=\"padding-top: 60%\">\n        {{ $t('spinningwheel.or press ctrl+enter') }}\n      </div>\n    </div>\n    <div v-if=\"isTouchScreen\" id=\"instructionsLayer\" ref=\"instructionsLayer\" @click=\"spin()\">\n      <div class=\"instructionsText\" id=\"topInstruction\" style=\"padding-top: 20%\">\n        {{ $t('spinningwheel.Tap to spin') }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import Wheel from './Wheel.js';\n  import * as Util from './Util.js';\n  import Ticker from './Ticker.js';\n  import CircleType from 'circletype';\n  import * as Locales from './Locales.js';\n\n  export default {\n    data() {\n      return {\n        myWheel: new Wheel(), myTicker: new Ticker(),\n        isTouchScreen: Util.isTouchScreen()\n      }\n    },\n    mounted() {\n      this.myWheel = new Wheel();\n      this.tick(0);\n      this.setupOverlay();\n      this.startKeyListener();\n    },\n    computed: {\n      wheelConfig() {\n        return this.$store.state.wheelConfig;\n      },\n      names() {\n        return this.$store.state.wheelConfig.names;\n      },\n      preferences() {\n        return this.$store.state.preferences\n      },\n      hasEntries() {\n        return (this.$store.state.wheelConfig.names.length>0);\n      }\n    },\n    watch: {\n      wheelConfig(newValue, oldValue) {\n        this.configureWheel();\n      },\n      preferences(newValue) {\n        this.configureWheel();\n      },\n      names(newValue, oldValue) {\n        this.myWheel.setNames(newValue, this.wheelConfig.maxNames,\n                              this.wheelConfig.allowDuplicates);\n      },\n    },\n    methods: {\n      setupOverlay() {\n        const side = document.getElementById('wheelCanvas').offsetWidth;\n        const fontSize = `${Math.round(side/20)}px`;\n        document.getElementById('instructionsLayer').style.fontSize = fontSize;\n        if (this.cantBeDisplayedInCircleType(this.$i18n.locale)) return;\n        const radius = side / 3;\n        new CircleType(document.getElementById('topInstruction'))\n          .radius(radius);\n        if (document.getElementById('bottomInstruction')) {\n          new CircleType(document.getElementById('bottomInstruction'))\n            .radius(radius).dir(-1);\n        }\n      },\n      cantBeDisplayedInCircleType(locale) {\n        return ['ar', 'bn', 'fa', 'gu', 'he', 'hi'].includes(locale);\n      },\n      startKeyListener() {\n        if (!Util.isTouchScreen()) {\n          const self = this;\n          document.addEventListener('keyup', event => {\n            if (event.key == 'Enter' && event.ctrlKey) {\n              self.spin();\n            }\n          });\n        }\n      },\n      spin() {\n        if (this.myWheel.isSpinning()) return;\n        if (!this.hasEntries) return;\n        this.trackInGoogleAnalytics();\n        this.$refs.instructionsLayer.style.display = 'none';\n        this.$store.commit('startWheelSpin');\n        this.$emit('wheel-started');\n        this.myWheel.click(this.onNameChanged, this.onStopWheelSpin);\n      },\n      onNameChanged() {\n        this.$emit('name-changed');\n      },\n      onStopWheelSpin(winningEntry) {\n        this.$store.commit('stopWheelSpin');\n        this.$emit('wheel-stopped', winningEntry);\n      },\n      trackInGoogleAnalytics() {\n        const defaultNames = this.wheelConfig.getDefaultNames();\n        if (!Util.arraysEqual(this.names, defaultNames)) {\n          const label = this.$store.state.version;\n          Util.trackEvent('Wheel', 'SpinWithCustomNames', label);\n        }\n        else {\n          Util.trackEvent('Wheel', 'SpinWithDefaultNames', '');\n        }\n      },\n      tick(ms) {\n        this.myTicker.setTimestamp(ms);\n        while (this.myTicker.shouldTick()) {\n          this.myWheel.tick();\n        }\n        const context = document.getElementById('wheelCanvas').getContext('2d');\n        this.myWheel.draw(context);\n        requestAnimationFrame(this.tick);\n      },\n      resetRotation() {\n        this.myWheel.resetRotation();\n      },\n      refresh() {\n        this.myWheel.refresh();\n      },\n      configureWheel() {\n        this.myWheel.configure(\n          this.$store.state.wheelConfig.getCoalescedColors(),\n          this.$store.state.wheelConfig.getWheelImage(),\n          this.$store.state.wheelConfig.spinTime,\n          this.$store.state.wheelConfig.slowSpin,\n          this.$store.state.wheelConfig.hubSize,\n          this.$store.getters.darkMode ? \n            '#000' : this.$store.state.wheelConfig.pageBackgroundColor\n        );\n      },\n    }\n  }\n</script>\n\n<style scoped>\n  .container {\n    position: relative;\n  }\n  .instructionsText {\n    width: 100%;\n    height: 100%;            \n    position: absolute;\n    top: 0;\n    left: 0;\n    color: #FFF;\n    text-shadow: 0px 0px 10px #000000;\n    background-color: #00000000;\n    font-family: sans-serif;\n    font-weight: 800;\n  }\n</style>\n","<!--\nCopyright 2020 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<template>\n  <div class=\"animated-background\" ref=\"overlay\">\n    <div class=\"content\">\n      <p class=\"animated-text\" style=\"color:#FFFFFF\">\n        {{ winnerText }}\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\n  import * as Util from './Util.js';\n\n  export default {\n    data() {\n      return {winnerText: ''}\n    },\n    methods: {\n      show(winnerText) {\n        const shortWinnerText = Util.extractDisplayText(winnerText, true);\n        if (shortWinnerText) {\n          this.winnerText = shortWinnerText;\n          this.$refs.overlay.style.display = 'block';\n          setTimeout(() => {\n            this.$refs.overlay.style.display = 'none';\n          }, 6000);\n        }\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .animated-background {\n    text-align: center;\n    position: fixed;\n    display: none;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0,0,0,0.7);\n    z-index: 45;\n    animation-name: fade-animation;\n    animation-duration: 6s;\n    animation-timing-function: ease-in;\n    animation-delay: 0s;\n    animation-iteration-count: 1;\n    animation-direction: normal;\n  }\n  @keyframes fade-animation {\n    0% {\n      opacity: 0.7;\n    }\n    100% {\n      opacity: 0;\n    }\n  }\n  .content {\n    margin-left: auto;\n    margin-right: auto;\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  .animated-text {\n    color: #FFFFFF;\n    font-size: 200px;\n    font-family: Quicksand;\n    animation-name: zoom-animation;\n    animation-duration: 6s;\n    animation-timing-function: ease-in;\n    animation-delay: 0s;\n    animation-iteration-count: 1;\n    animation-direction: normal;\n  }\n  @keyframes zoom-animation {\n    0% {\n      transform: scale(0.03);\n    }\n    100% {\n      transform: scale(5);\n      opacity: 0;\n    }\n  }\n</style>\n"],"sourceRoot":""}