{"version":3,"sources":["webpack:///static/loadingScreen.vue","webpack:///static/spinningwheel.vue","webpack:///static/optionsdialog.vue","webpack:///static/winneranimation.vue","webpack:///static/entry-counter.vue","webpack:///static/app.vue"],"names":[],"mappings":";AAsBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;;;ACkIA;EACA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;;;AC+IA;EACA;EACA;EACA;AACA;;;ACtRA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA;AACA;IACA;AACA;AACA;IACA;AACA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA;AACA;IACA;AACA;AACA;IACA;IACA;AACA;AACA;;;ACrEA;EACA;EACA;AACA;;;ACuVA","file":"css/index.css","sourcesContent":["<!--\nCopyright 2020 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<template>\n  <div class=\"overlay\">\n    ‚è≥\n  </div>\n</template>\n\n<style scoped>\n  .overlay {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #FFF;\n    z-index: 100;\n    text-align: center;\n    font-size: 100px;\n    cursor: pointer;\n  }\n</style>\n","<!--\nCopyright 2020 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<template>\n  <div class=\"container\" style=\"text-align: center\">\n    <canvas id=\"wheelCanvas\" style=\"width:100%\" @click=\"spin()\" width=\"700\" height=\"700\">\n    </canvas>\n    <div v-if=\"!isTouchScreen\" id=\"instructionsLayer\" ref=\"instructionsLayer\" @click=\"spin()\">\n      <div class=\"instructionsText\" id=\"topInstruction\" style=\"padding-top: 20%\">\n        {{ $t('spinningwheel.Click to spin') }}\n      </div>\n      <div class=\"instructionsText\" id=\"bottomInstruction\" style=\"padding-top: 60%\">\n        {{ $t('spinningwheel.or press ctrl+enter') }}\n      </div>\n    </div>\n    <div v-if=\"isTouchScreen\" id=\"instructionsLayer\" ref=\"instructionsLayer\" @click=\"spin()\">\n      <div class=\"instructionsText\" id=\"topInstruction\" style=\"padding-top: 20%\">\n        {{ $t('spinningwheel.Tap to spin') }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import Wheel from './Wheel.js';\n  import * as Util from './Util.js';\n  import Ticker from './Ticker.js';\n  import CircleType from 'circletype';\n  import * as Locales from './Locales.js';\n\n  export default {\n    data() {\n      return {\n        myWheel: new Wheel(), myTicker: new Ticker(),\n        isTouchScreen: Util.isTouchScreen()\n      }\n    },\n    mounted() {\n      this.myWheel = new Wheel();\n      this.tick(0);\n      this.setupOverlay();\n      this.startKeyListener();\n    },\n    computed: {\n      wheelConfig() {\n        return this.$store.state.wheelConfig;\n      },\n      names() {\n        return this.$store.state.wheelConfig.names;\n      },\n      preferences() {\n        return this.$store.state.preferences\n      },\n      hasEntries() {\n        return (this.$store.state.wheelConfig.names.length>0);\n      }\n    },\n    watch: {\n      wheelConfig(newValue, oldValue) {\n        this.configureWheel();\n      },\n      preferences(newValue) {\n        this.configureWheel();\n      },\n      names(newValue, oldValue) {\n        this.myWheel.setNames(newValue, this.wheelConfig.maxNames,\n                              this.wheelConfig.allowDuplicates);\n      },\n    },\n    methods: {\n      setupOverlay() {\n        const side = document.getElementById('wheelCanvas').offsetWidth;\n        const fontSize = `${Math.round(side/20)}px`;\n        document.getElementById('instructionsLayer').style.fontSize = fontSize;\n        if (this.cantBeDisplayedInCircleType(this.$i18n.locale)) return;\n        const radius = side / 3;\n        new CircleType(document.getElementById('topInstruction'))\n          .radius(radius);\n        if (document.getElementById('bottomInstruction')) {\n          new CircleType(document.getElementById('bottomInstruction'))\n            .radius(radius).dir(-1);\n        }\n      },\n      cantBeDisplayedInCircleType(locale) {\n        return ['ar', 'bn', 'fa', 'gu', 'he', 'hi'].includes(locale);\n      },\n      startKeyListener() {\n        if (!Util.isTouchScreen()) {\n          const self = this;\n          document.addEventListener('keyup', event => {\n            if (event.key == 'Enter' && event.ctrlKey) {\n              self.spin();\n            }\n          });\n        }\n      },\n      spin() {\n        if (this.myWheel.isSpinning()) return;\n        if (!this.hasEntries) return;\n        this.trackInGoogleAnalytics();\n        this.$refs.instructionsLayer.style.display = 'none';\n        this.$store.commit('startWheelSpin');\n        this.$emit('wheel-started');\n        this.myWheel.click(this.onNameChanged, this.onStopWheelSpin);\n      },\n      onNameChanged() {\n        this.$emit('name-changed');\n      },\n      onStopWheelSpin(winningEntry) {\n        this.$store.commit('stopWheelSpin');\n        this.$emit('wheel-stopped', winningEntry);\n      },\n      trackInGoogleAnalytics() {\n        const defaultNames = this.wheelConfig.getDefaultNames();\n        if (!Util.arraysEqual(this.names, defaultNames)) {\n          const label = this.$store.state.version;\n          Util.trackEvent('Wheel', 'SpinWithCustomNames', label);\n        }\n        else {\n          Util.trackEvent('Wheel', 'SpinWithDefaultNames', '');\n        }\n      },\n      tick(ms) {\n        this.myTicker.setTimestamp(ms);\n        while (this.myTicker.shouldTick()) {\n          this.myWheel.tick();\n        }\n        const context = document.getElementById('wheelCanvas').getContext('2d');\n        this.myWheel.draw(context);\n        requestAnimationFrame(this.tick);\n      },\n      resetRotation() {\n        this.myWheel.resetRotation();\n      },\n      refresh() {\n        this.myWheel.refresh();\n      },\n      configureWheel() {\n        this.myWheel.configure(\n          this.$store.state.wheelConfig.getCoalescedColors(),\n          this.$store.state.wheelConfig.getWheelImage(),\n          this.$store.state.wheelConfig.spinTime,\n          this.$store.state.wheelConfig.slowSpin,\n          this.$store.state.wheelConfig.hubSize,\n          this.$store.getters.darkMode ? \n            '#000' : this.$store.state.wheelConfig.pageBackgroundColor\n        );\n      },\n    }\n  }\n</script>\n\n<style scoped>\n  .container {\n    position: relative;\n  }\n  .instructionsText {\n    width: 100%;\n    height: 100%;            \n    position: absolute;\n    top: 0;\n    left: 0;\n    color: #FFF;\n    text-shadow: 0px 0px 10px #000000;\n    background-color: #00000000;\n    font-family: sans-serif;\n    font-weight: 800;\n  }\n</style>\n","<!--\nCopyright 2020 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<template>\n  <b-modal :active.sync=\"optionsDialogVisible\" :width=\"640\" scroll=\"keep\" :full-screen=\"$mq=='mobile'\">\n    <div class=\"modal-card\" style=\"width: auto\">\n      <section class=\"modal-card-body can-go-dark\">\n        <b-tabs v-model=\"activeTab\" type=\"is-boxed\" size=\"is-small\">\n          <b-tab-item :label=\"$t('optionsdialog.During spin')\">\n            <br/>\n            <div class=\"columns\">\n              <div class=\"column is-2\">\n                {{ $t('optionsdialog.Sound') }}\n              </div>\n              <div class=\"column\">\n                <b-select v-model=\"wheelConfig.duringSpinSound\">\n                  <option\n                    v-for=\"sound in duringSpinSounds\"\n                    :value=\"sound.value\"\n                    :key=\"sound.value\">\n                    {{ $t(sound.name) }}\n                  </option>\n                </b-select>\n              </div>\n            </div>\n            <br/>\n            <b-checkbox v-model=\"wheelConfig.allowDuplicates\">\n              {{ $t('optionsdialog.Allow duplicates on wheel') }}\n            </b-checkbox>\n            <b-checkbox v-model=\"wheelConfig.slowSpin\">\n              {{ $t('optionsdialog.Spin slowly') }}\n            </b-checkbox>\n            <hr>\n            {{ $t('optionsdialog.Spin time (seconds)') }}\n            <b-slider v-model=\"wheelConfig.spinTime\" :min=\"1\" :max=\"60\">\n              <template v-for=\"val in [10,20,30,40,50,60]\">\n                <b-slider-tick :value=\"val\" :key=\"val\">{{ val }}</b-slider-tick>\n              </template>\n            </b-slider>\n            <hr>\n            <b>{{ $t('optionsdialog.Max names on wheel') }}</b>\n            <br>\n            <small>\n              {{ $t('optionsdialog.All names in the text-box') }}\n            </small>\n            <b-slider v-model=\"wheelConfig.maxNames\" :min=\"4\" :max=\"500\">\n              <template v-for=\"val in [50,100,150,200,250,300,350,400,450,500]\">\n                <b-slider-tick :value=\"val\" :key=\"val\">{{ val }}</b-slider-tick>\n              </template>\n            </b-slider>\n          </b-tab-item>\n          <b-tab-item :label=\"$t('optionsdialog.After spin')\">\n            <br/>\n            <div class=\"columns\">\n              <div class=\"column is-2\">\n                {{ $t('optionsdialog.Sound') }}\n              </div>\n              <div class=\"column\">\n                <b-select v-model=\"wheelConfig.afterSpinSound\">\n                  <option\n                    v-for=\"sound in afterSpinSounds\"\n                    :value=\"sound.value\"\n                    :key=\"sound.value\">\n                    {{ $t(sound.name) }}\n                  </option>\n                </b-select>\n              </div>\n            </div>\n            <br/>\n            <b-checkbox v-model=\"wheelConfig.animateWinner\">\n              {{ $t('optionsdialog.Animate winning entry') }}\n            </b-checkbox>\n            <br/><br/>\n            <b-checkbox v-model=\"wheelConfig.launchConfetti\">\n              {{ $t('optionsdialog.Launch confetti') }}\n            </b-checkbox>\n            <br/><br/>\n            <b-checkbox v-model=\"wheelConfig.autoRemoveWinner\">\n              {{ $t('optionsdialog.Auto-remove winner after 5 seconds') }}\n            </b-checkbox>\n            <br/><br/>\n            <b-checkbox v-model=\"wheelConfig.displayWinnerDialog\">\n              {{ $t('optionsdialog.Display popup with message:') }}\n            </b-checkbox>\n            <b-input v-model=\"wheelConfig.winnerMessage\" :disabled=\"!wheelConfig.displayWinnerDialog\" style=\"margin-left:25px\" maxlength=\"100\"></b-input>\n            <b-checkbox v-model=\"wheelConfig.playClickWhenWinnerRemoved\">\n              {{ $t('optionsdialog.Play click sound when the winner is removed') }}\n            </b-checkbox>\n          </b-tab-item>\n          <b-tab-item :label=\"$t('optionsdialog.Colors')\">\n            <br/>\n            <div class=\"columns\" style=\"margin-bottom:10px\">\n              <div class=\"column is-one-third\">\n                {{ $t('optionsdialog.Apply a theme') }}\n              </div>\n              <div class=\"column\">\n                <b-field grouped>\n                  <b-select v-model=\"colorThemeCategory\" :placeholder=\"$t('optionsdialog.Pick category')\" expanded>\n                    <option\n                      v-for=\"categoryName in Object.keys(colorThemeCategories)\"\n                      :value=\"categoryName\"\n                      :key=\"categoryName\">\n                      {{ categoryName }}\n                    </option>\n                  </b-select>\n                  <b-select v-model=\"colorTheme\" :placeholder=\"$t('optionsdialog.Pick theme')\" expanded>\n                    <option\n                      v-for=\"themeName in Object.keys(colorThemes)\"\n                      :value=\"themeName\"\n                      :key=\"themeName\">\n                      {{ themeName }}\n                    </option>\n                  </b-select>\n                </b-field>\n              </div>\n            </div>\n            <hr>\n            <div class=\"columns\" style=\"margin-bottom:10px\">\n              <div class=\"column is-one-third\">\n                {{ $t('optionsdialog.Customize colors') }}\n              </div>\n              <div class=\"column\">\n                <div class=\"color-grid\">\n                  <div v-for=\"(setting, index) in wheelConfig.colorSettings\" :key=\"index\">\n                    <b-checkbox v-model=\"setting.enabled\"></b-checkbox>\n                    <input type=\"color\" v-model=\"setting.color\">\n                  </div>\n                </div>\n              </div>\n            </div>\n            <hr>\n            <div class=\"columns\" style=\"margin-bottom:10px\">\n              <div class=\"column is-one-third\">\n                {{ $t('optionsdialog.Background color') }}\n              </div>\n              <div class=\"column\">\n                <div class=\"color-grid\">\n                  <input type=\"color\" v-model=\"wheelConfig.pageBackgroundColor\">\n                </div>\n              </div>\n            </div>\n\n          </b-tab-item>\n          <b-tab-item :label=\"$t('optionsdialog.Image')\">\n            <br/>\n            <div class=\"columns\">\n              <div class=\"column is-half\">\n                {{ $t('optionsdialog.Image in the center of the wheel') }}\n              </div>\n              <div class=\"column\">\n                <b-select v-model=\"wheelConfig.pictureType\" expanded>\n                  <option value=\"none\">{{ $t('optionsdialog.None') }}</option>\n                  <option value=\"gallery\">{{ $t('optionsdialog.From Gallery') }}</option>\n                  <option value=\"uploaded\">{{ $t('optionsdialog.Custom') }}</option>\n                </b-select>\n              </div>\n            </div>\n            <b-select :placeholder=\"$t('optionsdialog.Select a gallery picture')\" v-model=\"wheelConfig.galleryPicture\" v-show=\"wheelConfig.pictureType=='gallery'\" expanded>\n              <option\n                v-for=\"pic in galleryPictures\"\n                :value=\"pic.fileName\"\n                :key=\"pic.fileName\">\n                {{ pic.title }}\n              </option>\n            </b-select>\n            <b-input v-model=\"wheelConfig.customPictureName\" disabled v-show=\"wheelConfig.pictureType=='uploaded'\"></b-input>\n            <br/>\n            <b-field class=\"file\" v-show=\"wheelConfig.pictureType=='uploaded'\">\n              <br/><br/>\n              <b-upload accept=\"image/*\" v-model=\"uploadedImage\">\n                <a class=\"button\">\n                  <i class=\"fas fa-upload\"></i>\n                  &nbsp;\n                  {{ $t('optionsdialog.Upload image') }}\n                </a>\n              </b-upload>\n            </b-field>\n            <div class=\"columns\">\n              <div class=\"column is-one-third\">\n                {{ $t('optionsdialog.Image size') }}\n              </div>\n              <div class=\"column\">\n                <b-select v-model=\"wheelConfig.hubSize\">\n                  <option\n                    v-for=\"hubSize in hubSizes\"\n                    :value=\"hubSize\"\n                    :key=\"hubSize\">\n                    {{ hubSize }}\n                  </option>\n                </b-select>\n              </div>\n            </div>\n          </b-tab-item>\n        </b-tabs>\n      </section>\n      <footer class=\"modal-card-foot\" style=\"justify-content:flex-end\">\n        <b-button size=\"is-medium\" @click=\"optionsDialogVisible=false\">\n          {{ $t('common.Cancel') }}\n        </b-button>\n        <b-button size=\"is-medium\" type=\"is-primary\" @click=\"saveOptions\">\n          {{ $t('common.OK') }}\n        </b-button>\n      </footer>\n    </div>\n  </b-modal>\n</template>\n\n<script>\n  import galleryImageList from './galleryImageList.js';\n  import colorThemeList from './colorThemeList.js';\n  import * as hubSizes from './hubSizes.js';\n  import * as Audio from './audio.js';\n  import * as Util from './Util.js';\n  import * as ImageUtil from './ImageUtil.js';\n\n  export default {\n    data() {\n      return {\n        optionsDialogVisible: false, wheelConfig: {}, activeTab: 0,\n        galleryPictures: galleryImageList.list,\n        colorThemeCategories: colorThemeList.list,\n        colorThemeCategory: null, colorThemes: [], colorTheme: null,\n        uploadedImage: {}, duringSpinSounds: Audio.getDuringSpinSounds(),\n        afterSpinSounds: Audio.getAfterSpinSounds(),\n        hubSizes: Object.keys(hubSizes.hubSizes)\n      }\n    },\n    computed: {\n      pictureType() {\n        return this.wheelConfig.pictureType;\n      },\n      galleryPicture() {\n        return this.wheelConfig.galleryPicture;\n      },\n      customPictureName() {\n        return this.wheelConfig.customPictureName;\n      }\n    },\n    watch: {\n      pictureType: function(newValue) {\n        if (newValue != 'gallery') {\n          this.wheelConfig.galleryPicture = 'images/none.png';\n        }\n        if (newValue != 'uploaded') {\n          this.wheelConfig.customPictureName = '';\n          this.wheelConfig.customPictureDataUri = '';\n        }\n      },\n      uploadedImage: function(newValue) {\n        var reader = new FileReader();\n        const self = this;\n        reader.onload = async function(e) {\n          Util.trackEvent('Wheel', 'UploadedCustomImage', '');\n          const dataUri = await ImageUtil.optimizeCenterImage(e.target.result);\n          self.wheelConfig.setCustomPicture(newValue.name, dataUri);\n          self.$buefy.dialog.confirm({\n            message: self.$t('optionsdialog.Your image has been uploaded', {fileName: newValue.name}),\n            hasIcon: true,\n            icon: 'palette',\n            iconPack: 'fa',\n            confirmText: self.$t('optionsdialog.Yes'),\n            cancelText: self.$t('optionsdialog.No'),\n            onConfirm: () => self.setColorsFromCustomPicture()\n          })\n        }\n        reader.readAsDataURL(newValue);\n      },\n      colorThemeCategory: function(newValue) {\n        if (newValue) {\n          this.colorThemes = this.colorThemeCategories[newValue];\n          this.colorTheme = null;\n        }\n      },\n      colorTheme: function(newValue) {\n        if (newValue) {\n          Util.trackEvent('Wheel', 'SetColorTheme', newValue);\n          for (let i=0; i<this.wheelConfig.colorSettings.length; i++) {\n            this.wheelConfig.colorSettings[i] = {color: '#000000', enabled: false};\n          }\n          const colors = this.colorThemes[newValue];\n          for (let i=0; i<colors.length; i++) {\n            this.wheelConfig.colorSettings[i] = {color: colors[i], enabled: true};\n          }\n        }\n      }\n    },\n    methods: {\n      show() {\n        this.wheelConfig = this.$store.state.wheelConfig.clone();\n        this.colorThemeCategory = null;\n        this.colorTheme = null;\n        this.optionsDialogVisible = true;\n      },\n      async setColorsFromCustomPicture() {\n        Util.trackEvent('Wheel', 'SetColorsFromCustomPicture', '');\n        const colors = await ImageUtil.extractColors(this.wheelConfig.customPictureDataUri);\n        for (let i=0; i<colors.length; i++) {\n          this.wheelConfig.colorSettings[i] = {color: colors[i], enabled: true};\n        }\n        this.$forceUpdate();\n      },\n      saveOptions() {\n        this.$store.commit('setWheelConfig', this.wheelConfig);\n        this.optionsDialogVisible = false;\n      },\n    }\n  }\n</script>\n\n<style scoped>\n  .color-grid {\n    display: grid;\n    grid-template-columns: 100px 100px 100px;\n    grid-gap: 20px;\n  }\n</style>\n","<!--\nCopyright 2020 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<template>\n  <div class=\"animated-background\" ref=\"overlay\">\n    <div class=\"content\">\n      <p class=\"animated-text\" style=\"color:#FFFFFF\">\n        {{ winnerText }}\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\n  import * as Util from './Util.js';\n\n  export default {\n    data() {\n      return {winnerText: ''}\n    },\n    methods: {\n      show(winnerText) {\n        const shortWinnerText = Util.extractDisplayText(winnerText, true);\n        if (shortWinnerText) {\n          this.winnerText = shortWinnerText;\n          this.$refs.overlay.style.display = 'block';\n          setTimeout(() => {\n            this.$refs.overlay.style.display = 'none';\n          }, 6000);\n        }\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .animated-background {\n    text-align: center;\n    position: fixed;\n    display: none;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0,0,0,0.7);\n    z-index: 45;\n    animation-name: fade-animation;\n    animation-duration: 6s;\n    animation-timing-function: ease-in;\n    animation-delay: 0s;\n    animation-iteration-count: 1;\n    animation-direction: normal;\n  }\n  @keyframes fade-animation {\n    0% {\n      opacity: 0.7;\n    }\n    100% {\n      opacity: 0;\n    }\n  }\n  .content {\n    margin-left: auto;\n    margin-right: auto;\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n  .animated-text {\n    color: #FFFFFF;\n    font-size: 200px;\n    font-family: Quicksand;\n    animation-name: zoom-animation;\n    animation-duration: 6s;\n    animation-timing-function: ease-in;\n    animation-delay: 0s;\n    animation-iteration-count: 1;\n    animation-direction: normal;\n  }\n  @keyframes zoom-animation {\n    0% {\n      transform: scale(0.03);\n    }\n    100% {\n      transform: scale(5);\n      opacity: 0;\n    }\n  }\n</style>\n","<!--\nCopyright 2020 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<template>\n  <div class=\"counter-text\">\n    {{ entriesMessage }}\n  </div>\n</template>\n\n<script>\n  export default {\n    computed: {\n      entriesMessage() {\n        return this.$t('common.Entries', {entryCount: this.$store.getters.entryCount});\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .counter-text {\n    font-size: 0.8em;\n    color:#BBB;\n  }\n</style>\n","<!--\nCopyright 2020 Google LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<template>\n  <span>\n    <loading-screen v-show=\"loading\"></loading-screen>\n    <toolbar\n      v-on:show-snackbar-message=\"showSnackbarMessage\"\n      v-on:reset-wheel=\"resetWheel()\"\n      v-on:open-open-dialog=\"openOpenDialog()\"\n      v-on:open-save-dialog=\"openSaveDialog()\"\n      v-on:open-share-dialog=\"openShareDialog()\"\n      v-on:open-customize-dialog=\"openCustomizeDialog()\"\n      v-on:open-twitter-dialog=\"openTwitterDialog()\"\n      v-on:open-sheet-dialog=\"openSheetDialog()\"\n      v-on:set-locale=\"setLocale\"\n    ></toolbar>\n    <section class=\"section\" style=\"padding-top:1rem; padding-bottom:0\">\n      <div class=\"columns\" v-bind:class=\"{ 'is-centered': $store.state.appStatus.fullScreen }\">\n        <div class=\"column is-3\" v-show=\"!$store.state.appStatus.fullScreen\">\n        </div>\n        <div class=\"column is-6\" v-bind:class=\"{ 'is-7': $store.state.appStatus.fullScreen }\">\n          <spinningwheel ref=\"spinningwheel\"\n            v-on:wheel-started=\"wheelStarted\"\n            v-on:name-changed=\"nameChanged\"\n            v-on:wheel-stopped=\"wheelStopped\"\n          ></spinningwheel>\n        </div>\n        <div class=\"column is-3\" v-show=\"!$store.state.appStatus.fullScreen\">\n          <span style=\"font-family:Quicksand\">\n            {{ $t('app.Enter names here') }}\n          </span>\n          <br/>\n          <textboxbuttons></textboxbuttons>\n          <textbox></textbox>\n          <entry-counter></entry-counter>\n          <app-info\n            v-on:open-options-dialog=\"openOptionsDialog()\"\n          ></app-info>\n        </div>\n      </div>\n    </section>\n\n    <opendialog\n      ref=\"opendialog\"\n      v-on:show-snackbar-message=\"showSnackbarMessage\"\n      v-on:start-wait-animation=\"startWaitAnimation\"\n      v-on:stop-wait-animation=\"stopWaitAnimation\"\n      v-on:auth-error=\"authError\"\n      v-on:reset-wheel-rotation=\"resetWheelRotation\"\n    ></opendialog>\n    <savedialog\n      ref=\"savedialog\"\n      v-on:show-snackbar-message=\"showSnackbarMessage\"\n      v-on:start-wait-animation=\"startWaitAnimation\"\n      v-on:stop-wait-animation=\"stopWaitAnimation\"\n      v-on:auth-error=\"authError\"\n    ></savedialog>\n    <optionsdialog ref=\"optionsdialog\"\n      v-on:show-snackbar-message=\"showSnackbarMessage\"\n    ></optionsdialog>\n    <sharedialog\n      ref=\"sharedialog\"\n      v-on:show-snackbar-message=\"showSnackbarMessage\"\n      v-on:start-wait-animation=\"startWaitAnimation\"\n      v-on:stop-wait-animation=\"stopWaitAnimation\"\n    ></sharedialog>\n    <twitterdialog\n      ref=\"twitterdialog\"\n      v-on:show-snackbar-message=\"showSnackbarMessage\"\n      v-on:start-wait-animation=\"startWaitAnimation\"\n      v-on:stop-wait-animation=\"stopWaitAnimation\"\n    ></twitterdialog>\n    <sheetdialog\n      ref=\"sheetdialog\"\n      v-on:show-snackbar-message=\"showSnackbarMessage\"\n      v-on:auth-error=\"authError\"\n    ></sheetdialog>\n    <winnerdialog\n      ref=\"winnerdialog\"\n      v-on:remove-name=\"removeName\"\n      v-on:remove-name-all=\"removeNameAll\"\n    ></winnerdialog>\n\n    <winneranimation ref=\"winneranimation\">\n    </winneranimation>\n  </span>\n</template>\n\n<script>\n  import loadingScreen from './loadingScreen.vue';\n  import toolbar from './toolbar.vue';\n  import spinningwheel from './spinningwheel.vue';\n  import textboxbuttons from './textboxbuttons.vue';\n  import textbox from './textbox.vue';\n  import appInfo from './appInfo.vue';\n  import opendialog from './opendialog.vue';\n  import savedialog from './savedialog.vue';\n  import optionsdialog from './optionsdialog.vue';\n  import sharedialog from './sharedialog.vue';\n  import twitterdialog from './twitterdialog.vue';\n  import sheetdialog from './sheetdialog.vue';\n  import winnerdialog from './winnerdialog.vue';\n  import winneranimation from './winneranimation.vue';\n  import entryCounter from './entry-counter.vue';\n  import * as ConfettiLauncher from './ConfettiLauncher.js';\n  import * as Util from './Util.js';\n  import * as FullScreen from './FullScreen.js';\n  import WheelConfig from './WheelConfig.js';\n  import Preferences from './Preferences.js';\n  import PageReloader from './PageReloader.js';\n  import * as ServerFunctions from './ServerFunctions.js';\n  import * as Audio from './audio.js';\n  import * as Locales from './Locales.js';\n  import * as WheelConfigLoader from './WheelConfigLoader.js';\n\n  export default {\n    components: {\n      loadingScreen, toolbar, textboxbuttons, textbox, spinningwheel, appInfo,\n      opendialog, winnerdialog, savedialog, optionsdialog, sharedialog,\n      twitterdialog, sheetdialog, winneranimation, entryCounter\n    },\n    async mounted() {\n      let result = '';\n      try {\n        result = await WheelConfigLoader.load(window.location);\n      }\n      catch(ex) {\n        Util.trackException(ex);\n        alert(ex);\n      }\n      if (result.redirectUrl) {\n        window.location.replace(result.redirectUrl);\n      }\n      else {\n        const wheelConfig = new WheelConfig(this.$t('common.We have a winner!'));\n        wheelConfig.loadJson(localStorage.getItem('LastWheelConfig'));\n        if (result.wheelConfig) {\n          wheelConfig.loadValues(result.wheelConfig);\n          ServerFunctions.logSharedWheelRead(result.sharedWheelPath);\n        }\n        this.$store.commit('setWheelConfig', wheelConfig);\n        this.setDocLangProperties();\n        this.loadPreferences();\n        this.startFullscreenDetection();\n        this.startOnlineDetection();\n        this.startVisibilityDetection();\n        this.displayLanguageTip();\n        this.refreshWheelOnFontLoad();\n        this.loading = false;\n      }\n    },\n    data() {\n      return {waitAnimation: {}, loading: true};\n    },\n    computed: {\n      names() {\n        return this.$store.state.wheelConfig.names\n      },\n      wheelConfig() {\n        return this.$store.state.wheelConfig\n      },\n      preferences() {\n        return this.$store.state.preferences\n      },\n      fullScreen() {\n        return this.$store.state.appStatus.fullScreen\n      },\n      wheelSpinning() {\n        return this.$store.state.appStatus.wheelSpinning\n      },\n      darkMode() {\n        return this.$store.getters.darkMode\n      },\n      pageColor() {\n        return this.$store.state.wheelConfig.pageBackgroundColor\n      }\n    },\n    watch: {\n      wheelConfig(newValue, oldValue) {\n        Util.updateColorStyles(this.darkMode, '#777', this.pageColor);\n        localStorage.setItem('LastWheelConfig', this.$store.state.wheelConfig.getJson());\n        Audio.preloadSounds(newValue.duringSpinSound, newValue.afterSpinSound);\n      },\n      names(newValue, oldValue) {\n        localStorage.setItem('LastWheelConfig', this.$store.state.wheelConfig.getJson());\n      },\n      preferences(newValue) {\n        Util.updateColorStyles(this.darkMode, '#777', this.pageColor);\n        localStorage.setItem('Preferences', newValue.getJson());\n      },\n      fullScreen(newValue, oldValue) {\n        if (newValue) {\n          Util.trackEvent('Wheel', 'EnterFullscreen', '');\n          FullScreen.turnOnFullscreen();\n        }\n        if (!newValue) {\n          Util.trackEvent('Wheel', 'ExitFullscreen', '');\n          FullScreen.turnOffFullscreen();\n        }\n      },\n    },\n    methods: {\n      startFullscreenDetection() {\n        const self = this;\n        document.addEventListener('fullscreenchange', event => {\n          if (FullScreen.fullscreenOn()) {\n            self.$store.commit('enterFullScreen');\n          }\n          else {\n            self.$store.commit('exitFullScreen');\n          }\n        })      \n      },\n      startOnlineDetection() {\n        this.$store.commit('setOnline', navigator.onLine);\n        const self = this;\n        window.addEventListener('online', event => {\n          self.$store.commit('setOnline', navigator.onLine);\n        });\n        window.addEventListener('offline', event => {\n          self.$store.commit('setOnline', navigator.onLine);\n        });\n      },\n      startVisibilityDetection() {\n        const reloader = new PageReloader();\n        document.addEventListener(\"visibilitychange\", function() {\n          reloader.reloadOutdatedPage(document.hidden);\n        })\n      },\n      displayLanguageTip() {\n        const tipLocale = Locales.getLangTipLocale(this.$i18n.locale, navigator.languages);\n        if (tipLocale) {\n          setTimeout(async() => {\n            const file = Locales.getMessagesFileName(tipLocale);\n            const messages = (\n              await import(/* webpackChunkName: \"locale-[request]\" */\n                          `./locales/${file}`)\n            ).default;\n            const msg = messages['app']['Click the Language menu'];\n            this.showSnackbarMessage(msg);\n          }, 3000);\n        }\n      },\n      loadPreferences() {\n        const prefs = new Preferences();\n        prefs.loadJson(localStorage.getItem('Preferences'));\n        this.$store.commit('setPreferences', prefs);\n      },\n      setDocLangProperties() {\n        document.documentElement.setAttribute('lang', this.$i18n.locale);\n        document.title = 'Wheel-spinner | ' + this.$t('app.Random name picker');\n        const desc = this.$t('app.Free and easy to use');\n        document.querySelector('meta[name=\"description\"]').setAttribute(\"content\", desc);\n      },\n      refreshWheelOnFontLoad() {\n        if (document.fonts) {\n          const self = this;\n          document.fonts.ready.then(function() {\n            self.$refs.spinningwheel.refresh();\n          })\n        }\n      },\n      resetWheel() {\n        const wheelConfig = new WheelConfig(this.$t('common.We have a winner!'));\n        this.$store.commit('setWheelConfig', wheelConfig);\n        this.showSnackbarMessage(this.$t('app.Loaded default names and options'));\n      },\n      openOpenDialog() {\n        Util.trackEvent('Wheel', 'ShowOpenDialog', '');\n        this.$refs.opendialog.show();\n      },\n      openSaveDialog() {\n        Util.trackEvent('Wheel', 'ShowSaveDialog', '');\n        this.$refs.savedialog.show();\n      },\n      openShareDialog() {\n        Util.trackEvent('Wheel', 'GetSharableLink', '');\n        this.$refs.sharedialog.show();\n      },\n      openCustomizeDialog() {\n        Util.trackEvent('Wheel', 'ShowCustomizeDialog', '');\n        this.$refs.optionsdialog.show();\n      },\n      openTwitterDialog() {\n        Util.trackEvent('Wheel', 'ShowSocialMediaDialog', '');\n        this.$refs.twitterdialog.show();\n      },\n      openSheetDialog() {\n        Util.trackEvent('Wheel', 'ShowSpreadsheetDialog', '');\n        this.$refs.sheetdialog.show();\n      },\n      setLocale(locale) {\n        window.location.replace(Locales.getRelativeUrl(window.location.hostname, locale));\n      },\n      nameChanged() {\n        const state = this.$store.state;\n        if (state.appStatus.wheelSpinning && state.wheelConfig.shouldPlayTicks()) {\n          Audio.playTick();\n        }\n      },\n      wheelStarted() {\n        Audio.startMusic(this.wheelConfig.duringSpinSound);\n      },\n      wheelStopped(winningEntry) {\n        Audio.stopMusic();\n        if (this.wheelConfig.animateWinner) {\n          this.$refs.winneranimation.show(winningEntry);\n        }\n        if (this.wheelConfig.launchConfetti) {\n          ConfettiLauncher.launch(this.wheelConfig.getCoalescedColors());\n        }\n        if (this.wheelConfig.displayWinnerDialog) {\n          this.$refs.winnerdialog.show(winningEntry);\n        }\n        if (this.wheelConfig.autoRemoveWinner) {\n          setTimeout(_ => this.removeName(winningEntry), 5000);\n        }\n        Audio.playAfterSpin(this.wheelConfig.afterSpinSound, Util.extractDisplayText(winningEntry));\n      },\n      showSnackbarMessage(msg) {\n        this.$buefy.toast.open({message: msg, duration: 6000});\n      },\n      startWaitAnimation() {\n        this.waitAnimation = this.$buefy.loading.open({container: null});\n      },\n      stopWaitAnimation() {\n        this.waitAnimation.close();\n      },\n      removeName(name) {\n        if (this.$store.state.wheelConfig.playClickWhenWinnerRemoved) {\n          Audio.playClick();\n        }\n        this.$store.commit('removeName', name);\n        const msg = this.$t('app.Removed', {name: Util.extractDisplayText(name, true)});\n        this.showSnackbarMessage(msg);\n      },\n      removeNameAll(name) {\n        if (this.$store.state.wheelConfig.playClickWhenWinnerRemoved) {\n          Audio.playClick();\n        }\n        this.$store.commit('removeNameAll', name);\n        const msg = this.$t('app.Removed', {name: Util.extractDisplayText(name, true)});\n        this.showSnackbarMessage(msg);\n      },\n      authError(ex) {\n        const msg = this.$t('app.authError', {error: ex.toString()});\n        Util.trackEvent('AuthError', ex.toString(), navigator.userAgent);\n        this.$buefy.dialog.alert({\n          title: this.$t('app.Error'),\n          message: msg,\n          type: 'is-danger',\n          hasIcon: true,\n          ariaRole: 'alertdialog',\n          ariaModal: true,\n          onConfirm: () => location.reload(true)\n        })\n      },\n      resetWheelRotation() {\n        this.$refs.spinningwheel.resetRotation();\n      }\n    }\n  }\n</script>\n\n<style>\n  .can-go-dark {}\n</style>\n"],"sourceRoot":""}